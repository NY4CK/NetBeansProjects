
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Principal extends javax.swing.JFrame {


    public Principal() {
        initComponents();
        btnSalvar.setMnemonic(KeyEvent.VK_S);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        lblPressaoSistolica = new javax.swing.JLabel();
        lblPressaoDiastolica = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        txtPressaoSistolica = new javax.swing.JTextField();
        txtPressaoDiastolica = new javax.swing.JTextField();
        cbEstresse = new javax.swing.JCheckBox();
        btnSalvar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabela = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 255, 255)));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("AFERIMENTO PRESSÃO");

        lblData.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblData.setLabelFor(txtData);
        lblData.setText("DATA:");
        lblData.setToolTipText("DATA");

        lblHora.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblHora.setLabelFor(txtHora);
        lblHora.setText("HORA:");
        lblHora.setToolTipText("HORA");

        lblPressaoSistolica.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPressaoSistolica.setLabelFor(txtPressaoSistolica);
        lblPressaoSistolica.setText("PRESSÃO SISTÓLICA:");
        lblPressaoSistolica.setToolTipText("PRESSÃO SISTÓLICA:");

        lblPressaoDiastolica.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPressaoDiastolica.setLabelFor(lblPressaoDiastolica);
        lblPressaoDiastolica.setText("PRESSÃO DIASTÓLICA:");
        lblPressaoDiastolica.setToolTipText("PRESSÃO DIASTÓLICA:");

        txtData.setNextFocusableComponent(txtHora);

        txtHora.setNextFocusableComponent(txtPressaoSistolica);

        txtPressaoSistolica.setNextFocusableComponent(txtPressaoDiastolica);

        txtPressaoDiastolica.setNextFocusableComponent(cbEstresse);

        cbEstresse.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cbEstresse.setText("ESTRESSE");
        cbEstresse.setToolTipText("ESTRESSE");
        cbEstresse.setNextFocusableComponent(btnSalvar);
        cbEstresse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEstresseActionPerformed(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSalvar.setText("SALVAR");
        btnSalvar.setToolTipText("SALVAR");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        tblTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATA", "HORA", "PRESSAO SISTÓLICA", "PRESSAO DIASTÓlLICA", "ESTRESSE"
            }
        ));
        jScrollPane1.setViewportView(tblTabela);
        tblTabela.getAccessibleContext().setAccessibleName("AFERIMENTO PRESSÃO");
        tblTabela.getAccessibleContext().setAccessibleDescription("DADOS DAS SUAS MEDIÇÕES DE PRESSÂO");

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblData))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPressaoSistolica)
                            .addComponent(lblPressaoDiastolica))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPressaoSistolica)
                                .addComponent(txtPressaoDiastolica, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(cbEstresse))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblData))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHora)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPressaoSistolica)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtPressaoSistolica, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPressaoDiastolica)
                    .addComponent(txtPressaoDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbEstresse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalvar)
                .addGap(88, 88, 88))
        );

        jLabel2.getAccessibleContext().setAccessibleDescription("AFERIMENTO PRESSÃO");
        txtData.getAccessibleContext().setAccessibleName("DATA");
        txtData.getAccessibleContext().setAccessibleDescription("INFORME A DATA");
        txtHora.getAccessibleContext().setAccessibleName("HORA");
        txtHora.getAccessibleContext().setAccessibleDescription("INFORME A HORA");
        txtPressaoSistolica.getAccessibleContext().setAccessibleName("PRESSÃO SISTÓLICA");
        txtPressaoSistolica.getAccessibleContext().setAccessibleDescription("INFORME A PRESSAO SISTÓLICA");
        txtPressaoDiastolica.getAccessibleContext().setAccessibleName("PRESSÃO DIASTÓLICA");
        txtPressaoDiastolica.getAccessibleContext().setAccessibleDescription("INFORME A PRESSÃO DIASTÓLICA");
        btnSalvar.getAccessibleContext().setAccessibleDescription("SALVAR DADOS E ALTERAÇÕES");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbEstresseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEstresseActionPerformed
        if(cbEstresse.isSelected()){
            // Caso a caixa de seleção seja marcada
            JOptionPane.showConfirmDialog(null,"Paciente está em situação de estresse");
        } else {
            JOptionPane.showConfirmDialog(null, "Paciente não está em situação de estresse.");
                    
                 }
    }//GEN-LAST:event_cbEstresseActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
       // Obter os dados inseridos
       String data = txtData.getText();
       String hora = txtHora.getText();
       
       // converter valores para inteiros
       int pressaoSistolica, pressaoDiastolica;
       try{
           
           pressaoSistolica = Integer.parseInt(txtPressaoSistolica.getText());
           pressaoDiastolica = Integer.parseInt(txtPressaoDiastolica.getText());
       } catch (NumberFormatException e) {
           JOptionPane.showConfirmDialog(null, "PRESSÃO SISTÓLICA E DIASTÓLICA DEVEM SER NÚMEROS INTEIROS.",
                   " ERRO ", JOptionPane.ERROR_MESSAGE);
        return;
       }
       
       boolean estresse = cbEstresse.isSelected();
       
       //verificar se os campos estão preenchidos
       if (data.isEmpty() || hora.isEmpty()) {
           JOptionPane.showConfirmDialog(null, "POR FAVOR PREENCHA TODOS OS CAMPOS OBRIGATÓRIOS",
                   " ERRO ", JOptionPane.ERROR_MESSAGE);
           return;
       }
       
       //adicionar os dados a tabela
       DefaultTableModel model = (DefaultTableModel) tblTabela.getModel();
       model.addRow(new Object[]{data, hora, pressaoSistolica, pressaoDiastolica, estresse ? "SIM" : "NÃO"});
       
       // Limpa os campos após salvar os dados
    txtData.setText("");
    txtHora.setText("");
    txtPressaoSistolica.setText("");
    txtPressaoDiastolica.setText("");
    cbEstresse.setSelected(false);

    // Mensagem de sucesso
    JOptionPane.showMessageDialog(null, "Dados salvos com sucesso!");
    
    salvarDadosEmArquivo();
    }//GEN-LAST:event_btnSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              Principal principal = new Principal();
              try{
              principal.carregarDadosArquivos();
              } catch (IOException e) {
                  e.printStackTrace();
              }
              principal.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox cbEstresse;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblPressaoDiastolica;
    private javax.swing.JLabel lblPressaoSistolica;
    private javax.swing.JTable tblTabela;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtPressaoDiastolica;
    private javax.swing.JTextField txtPressaoSistolica;
    // End of variables declaration//GEN-END:variables

    private void salvarDadosEmArquivo() {
        
        try {
            // Obtém o diretório da pasta do usuário
            //String diretorioUsuario = System.getProperty("User.Home");
            
            // Cria o caminho completo para o arquivo na pasta do usuário
            String caminhoArquivo = "C:\\teste\\arquivo.csv";
            
            File arquivo = new File(caminhoArquivo);
            FileWriter writer = new FileWriter(arquivo, true);
            
            if (!arquivo.exists()) {
            writer.write("DATA,HORA,PRESSAO SISTÓLICA,PRESSAO DIASTÓLICA,ESTRESSE\n");
        }
            
            // Obtém os dados da última linha da tabela
            int ultimaLinha = tblTabela.getRowCount() - 1;
            String data = tblTabela.getValueAt(ultimaLinha, 0).toString();
            String hora = tblTabela.getValueAt(ultimaLinha, 1).toString();
            String pressaoSistolica = tblTabela.getValueAt(ultimaLinha, 2).toString();
            String pressaoDiastolica = tblTabela.getValueAt(ultimaLinha, 3).toString();
            String estresse = tblTabela.getValueAt(ultimaLinha, 4).toString();
            
            // Escreve os dados no arquivo
            writer.write(data + "," + hora + "," + pressaoSistolica + "," + pressaoDiastolica + "," + estresse + "\n");
            
            writer.close();
            
            JOptionPane.showMessageDialog(null , "Dados salvos em arquivo com sucesso!");
            
            } catch (IOException e) {
                JOptionPane.showConfirmDialog(null,  "Erro ao salvar os dados em arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void carregarDadosArquivos() throws IOException{
        
        try {
            
            String caminhoArquivo = "C:\\teste\\arquivo.csv";
            
            BufferedReader reader = new BufferedReader(new FileReader(caminhoArquivo));
            
            
            DefaultTableModel model = (DefaultTableModel) tblTabela.getModel();
            
            // limpar a tabela antes de adicionar os dados
            model.setRowCount(0);
            
            // Lê cada linha do arquivo e adiciona à tabela
            String linha;
            while((linha = reader.readLine()) != null){
                
                String[] dados = linha.split(",");
                
                String data = dados[0];
                String hora = dados[1];
                String pressaoSistolica = dados[2];
                String pressaoDiastolica = dados[3];
                String estresse = dados[4];
                
                model.addRow(new Object[]{data, hora, pressaoSistolica, pressaoDiastolica, estresse});
            }
             reader.close(); 
        } catch(IOException e){
             // Caso o arquivo não exista ou ocorra algum erro ao ler, não faz nada
             }
        }
    }

